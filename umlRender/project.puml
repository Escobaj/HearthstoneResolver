@startuml

abstract class ATargetable{
    -int _currentHealth
    -int _defaultHealth
    -int _maxHealth

    #int getDefaultHealth()
    +void takeDamage(int factor)
    +void boostHealth(int health)
    +void heal(int factor)
    +void fixedHealth(int newHealth)
    +int getHealth()
    +int getMaxHealth()
}

class Player {
    -std::vector<ACard> _hands
    -std::vector<ACard> _board
    -std::vector<ACard> _deck
    -std::vector<ACard> _played
    -std::map<std::string, int> _variables
    -std::vector<ACard> _secrets
    -AHeroPower *_heroPower
    -AWeapons *_weapons
    -int _maxMana
    -int _currentMana

    +void draw()
    +void draw(int nb)

    +int getVariable(std::string &key)
    +void updateVariable(std::string &key, int nb)
    +void replaceVariableValue(std::string &key, int nb)
    +void resetVariable(std::string &key)
    +void updateManaMax(int nb)
    +void updateMana(int nb)
    +void setManaMax(int nb)
    +void setMana(int nb)
    +void setDeck(std::vector<ACard &> deck)

}

abstract class ACard {
    -int _defaultCost
    -int _beforeEventCost
    -int _currentCost
    -Target _target
    -int _order
    -int _id
    -std::string _name
    -Class _membership

    +State play(unsigned int order)
    +void updateCost(int cost)
    +void alterCost(int factor)
    +bool requirement()
    +int getId()
    +int getOrder()
    +std::string getName()
}

abstract class ADamager {
    -int _defaultDamage
    -int _currentDamage
    -int _attackMax
    -int _attackRemain
    -bool _canAttack

    +rbool attackRequirement()
    +void attack(Playable target)
    +void setAttackMax(int nb)
    +void setCanAttack(bool canAttack)
}

abstract class AMinion {
    -bool _targelable
    -bool _stealth
    -bool _taunt
    -bool _divineShield
    #CardType _type

    +bool getTaunt()
    +bool getStealth()
    +bool getTargelable()
    +bool getDivineShield()

    +void setDivineShield(bool divineShield)
    +void setTargelable(bool targelable)
    +void setTaunt(bool taunt)
    +void setStealth(bool stealth)

    +void silence()
    +void destroy()
}

abstract class ASpell {
    +void run()
    +void run(Playable target)
}

abstract class AWeapon {
    #int _defaultDurability
    #int _currentDurability

    +int attack(Playable target)
    +void AffectDurability(int factor)
}

abstract class AHeroPower {
    -int counterHeroPower
    -int currentCounter
}

note "All <b>minion</b> card \nextends from this class" as N1
note "All <b>spell</b> card \nextends from this class" as N2
note "All <b>Weapon</b> card \nextends from this class" as N3
note "All <b>Hero power</b>\nextends from this class" as N4

ADamager <|-- AMinion
ADamager <|-- AWeapon



ATargetable <|-- Player
ATargetable <|-- AMinion

ACard <|-- ASpell
ACard <|-- AHeroPower
ACard <|-- ADamager

AMinion -- N1
ASpell -- N2
AWeapon -- N3
AHeroPower -- N4

newpage

enum Target {
    ALL
    PLAYER
    OPPONENT_PLAYER
    ALLIE_PLAYER
    MINION
    ALLIE_MINION
    OPPONEMENT_MINION
    NONE
}

enum Class {
    NEUTRAL
    DRUID
    HUNTER
    MAGE
    PALADIN
    PRIEST
    ROGUE
    SHAMAN
    WARLOCK
    WARRIOR
    GRIMY_GOONS
    KABAL
    JADE_LOTUS
}

enum CardType{
    DRAGON
    MECA
    BEAST
    MURLOC
    DEMON
    PIRATES
    TOTEM
    GENERAL
    SPELL
    HERO_POWER
    WEAPON
}

enum State{
    FORBIDDEN
    TARGET_REQUIRED
    SUCCESSFULL
}

newpage

class EventHandler{
    -GameManager gameInstance
    -bool endGame
    #vector<EventType> _queue
    #vector<...> _...
    +void ApplyEvent()
    +void check()
    +Player *isWin()
}

abstract class GameManager {
    +Player _player1
    +Player _player2
    +int _turn
    +EventHandler _event
    +bool initFromFile(std::string &filename)
}

enum EventType{
    DEATHRATLE
    BATTLECRY
    DEALDAMAGE
    ...
}

@enduml